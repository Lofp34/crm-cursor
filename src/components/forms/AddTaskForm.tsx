'use client'

import React, { useState } from 'react'
import { Input, Textarea } from '../ui/Input'
import { Button } from '../ui/Button'
import { useTasks, useContacts, useDeals } from '../../hooks/useDatabase'
import type { TaskPriority, TaskType } from '../../types'

interface AddTaskFormProps {
  onSuccess: () => void
}

export default function AddTaskForm({ onSuccess }: AddTaskFormProps) {
  const { addTask } = useTasks()
  const { contacts } = useContacts()
  const { deals } = useDeals()

  const [title, setTitle] = useState('')
  const [description, setDescription] = useState('')
  const [contactId, setContactId] = useState('')
  const [dealId, setDealId] = useState('')
  const [type, setType] = useState<TaskType>('call')
  const [priority, setPriority] = useState<TaskPriority>('medium')
  const [dueDate, setDueDate] = useState<string>(() => {
    const today = new Date().toISOString().split('T')[0]
    return today
  })
  const [loading, setLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (!title.trim()) return

    setLoading(true)
    try {
      await addTask({
        title,
        description: description.trim() || undefined,
        contactId: contactId || undefined,
        dealId: dealId || undefined,
        type,
        status: 'pending',
        priority,
        dueDate: new Date(dueDate),
        isAutoGenerated: false
      })
      onSuccess()
    } finally {
      setLoading(false)
    }
  }

  const typeOptions: { value: TaskType; label: string }[] = [
    { value: 'call', label: 'Appel' },
    { value: 'email', label: 'E-mail' },
    { value: 'meeting', label: 'Rendez-vous' },
    { value: 'follow-up', label: 'Relance' },
    { value: 'other', label: 'Autre' }
  ]

  const priorityOptions: { value: TaskPriority; label: string }[] = [
    { value: 'high', label: 'Haute' },
    { value: 'medium', label: 'Moyenne' },
    { value: 'low', label: 'Basse' }
  ]

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Input label="Titre" value={title} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTitle(e.target.value)} required />
      <Textarea label="Description" value={description} onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setDescription(e.target.value)} />

      {/* Contact associé */}
      <div>
        <label className="block text-subhead font-medium text-gray-700 mb-1">Contact</label>
        <select
          value={contactId}
          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setContactId(e.target.value)}
          className="w-full rounded-lg border border-gray-300 px-3 py-2 text-body focus:outline-none focus:ring-2 focus:ring-primary-500"
        >
          <option value="">-- Aucun --</option>
          {contacts.map((c) => (
            <option key={c.id} value={c.id}>{c.name}</option>
          ))}
        </select>
      </div>

      {/* Deal associé */}
      <div>
        <label className="block text-subhead font-medium text-gray-700 mb-1">Deal</label>
        <select
          value={dealId}
          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setDealId(e.target.value)}
          className="w-full rounded-lg border border-gray-300 px-3 py-2 text-body focus:outline-none focus:ring-2 focus:ring-primary-500"
        >
          <option value="">-- Aucun --</option>
          {deals.map((d) => (
            <option key={d.id} value={d.id}>{d.title}</option>
          ))}
        </select>
      </div>

      {/* Type & Priority */}
      <div className="grid grid-cols-2 gap-3">
        <div>
          <label className="block text-subhead font-medium text-gray-700 mb-1">Type</label>
          <select
            value={type}
            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setType(e.target.value as TaskType)}
            className="w-full rounded-lg border border-gray-300 px-3 py-2 text-body focus:outline-none focus:ring-2 focus:ring-primary-500"
          >
            {typeOptions.map((o) => (
              <option key={o.value} value={o.value}>{o.label}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-subhead font-medium text-gray-700 mb-1">Priorité</label>
          <select
            value={priority}
            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setPriority(e.target.value as TaskPriority)}
            className="w-full rounded-lg border border-gray-300 px-3 py-2 text-body focus:outline-none focus:ring-2 focus:ring-primary-500"
          >
            {priorityOptions.map((o) => (
              <option key={o.value} value={o.value}>{o.label}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Due date */}
      <Input label="Date d'échéance" type="date" value={dueDate} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setDueDate(e.target.value)} />

      <Button type="submit" className="w-full" disabled={loading}>
        {loading ? 'Enregistrement...' : 'Ajouter la tâche'}
      </Button>
    </form>
  )
}