import { db } from './database'
import type { Contact, Deal, Task } from '../types'

export async function seedDemoData() {
  // V√©rifier si des donn√©es existent d√©j√†
  const existingContacts = await db.contacts.count()
  if (existingContacts > 0) return

  // Contacts de d√©monstration
  const demoContacts: Omit<Contact, 'id' | 'createdAt' | 'updatedAt'>[] = [
    {
      name: 'Marie Dubois',
      email: 'marie.dubois@example.com',
      phone: '+33 6 12 34 56 78',
      company: 'TechStart SAS',
      tags: ['startup', 'tech'],
      status: 'hot',
      score: 4,
      lastInteraction: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // Il y a 2 jours
      notes: 'Tr√®s int√©ress√©e par notre solution. √Ä recontacter rapidement.'
    },
    {
      name: 'Pierre Martin',
      email: 'p.martin@grandecorp.fr',
      phone: '+33 1 23 45 67 89',
      company: 'Grande Corp',
      tags: ['enterprise', 'finance'],
      status: 'warm',
      score: 3,
      lastInteraction: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // Il y a 5 jours
      notes: 'Directeur IT, d√©cideur final. Budget disponible Q1.'
    },
    {
      name: 'Sophie Leclerc',
      email: 'sophie@consulting-plus.com',
      company: 'Consulting Plus',
      tags: ['consulting', 'pme'],
      status: 'cold',
      score: 2,
      notes: 'Premier contact √©tabli. √Ä qualifier davantage.'
    },
    {
      name: 'Thomas Rousseau',
      email: 'thomas.rousseau@retail-chain.fr',
      phone: '+33 4 56 78 90 12',
      company: 'Retail Chain',
      tags: ['retail', 'commerce'],
      status: 'warm',
      score: 3,
      lastInteraction: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // Hier
      notes: 'Responsable digital, cherche √† moderniser les processus.'
    }
  ]

  // Ajouter les contacts
  const addedContacts: Contact[] = []
  for (const contactData of demoContacts) {
    const contact: Contact = {
      ...contactData,
      id: crypto.randomUUID(),
      createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Dans les 30 derniers jours
      updatedAt: new Date()
    }
    await db.contacts.add(contact)
    addedContacts.push(contact)
  }

  // Deals de d√©monstration
  const demoDeals: Omit<Deal, 'id' | 'createdAt' | 'updatedAt' | 'dueDate' | 'isArchived'>[] = [
    {
      title: 'Impl√©mentation CRM TechStart',
      contactId: addedContacts[0].id,
      value: 25000,
      stage: 'proposal',
      probability: 75,
      description: 'Mise en place d\'une solution CRM compl√®te pour l\'√©quipe commerciale.'
    },
    {
      title: 'Transformation digitale Grande Corp',
      contactId: addedContacts[1].id,
      value: 85000,
      stage: 'meeting',
      probability: 50,
      description: 'Audit et recommandations pour la transformation digitale.'
    },
    {
      title: 'Formation √©quipe Consulting Plus',
      contactId: addedContacts[2].id,
      value: 8500,
      stage: 'prospect',
      probability: 30,
      description: 'Formation de l\'√©quipe aux nouvelles m√©thodologies.'
    },
    {
      title: 'Optimisation e-commerce Retail Chain',
      contactId: addedContacts[3].id,
      value: 45000,
      stage: 'engaged',
      probability: 65,
      description: 'Optimisation de la plateforme e-commerce existante.'
    }
  ]

  // Ajouter les deals
  const addedDeals: Deal[] = []
  for (const dealData of demoDeals) {
    const createdAt = new Date(Date.now() - Math.random() * 20 * 24 * 60 * 60 * 1000) // Dans les 20 derniers jours
    const maxDays = {
      prospect: 30,
      engaged: 14,
      meeting: 7,
      proposal: 21,
      won: 0,
      lost: 0
    }[dealData.stage] || 30

    const deal: Deal = {
      ...dealData,
      id: crypto.randomUUID(),
      createdAt,
      updatedAt: new Date(),
      dueDate: new Date(createdAt.getTime() + maxDays * 24 * 60 * 60 * 1000),
      isArchived: false
    }
    await db.deals.add(deal)
    addedDeals.push(deal)
  }

  // T√¢ches de d√©monstration
  const demoTasks: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>[] = [
    {
      title: 'Appeler Marie pour finaliser la proposition',
      description: 'Revoir les derniers d√©tails techniques et valider le budget.',
      contactId: addedContacts[0].id,
      dealId: addedDeals[0].id,
      type: 'call',
      status: 'pending',
      priority: 'high',
      dueDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Demain
      isAutoGenerated: false
    },
    {
      title: 'Pr√©parer la pr√©sentation pour Grande Corp',
      description: 'Adapter la pr√©sentation aux besoins sp√©cifiques du client.',
      contactId: addedContacts[1].id,
      dealId: addedDeals[1].id,
      type: 'other',
      status: 'pending',
      priority: 'medium',
      dueDate: new Date(), // Aujourd'hui
      isAutoGenerated: false
    },
    {
      title: 'Envoyer la documentation √† Sophie',
      description: 'Transmettre les brochures et √©tudes de cas pertinentes.',
      contactId: addedContacts[2].id,
      dealId: addedDeals[2].id,
      type: 'email',
      status: 'pending',
      priority: 'low',
      dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // Dans 3 jours
      isAutoGenerated: false
    },
    {
      title: 'RDV d√©monstration avec Thomas',
      description: 'Pr√©sentation de la solution en live avec l\'√©quipe technique.',
      contactId: addedContacts[3].id,
      dealId: addedDeals[3].id,
      type: 'meeting',
      status: 'pending',
      priority: 'high',
      dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Apr√®s-demain
      isAutoGenerated: false
    },
    {
      title: 'T√¢che en retard - Relancer le prospect',
      description: 'T√¢che g√©n√©r√©e automatiquement suite √† l\'expiration d\'un deal.',
      contactId: addedContacts[2].id,
      type: 'follow-up',
      status: 'pending',
      priority: 'high',
      dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // Il y a 2 jours (en retard)
      isAutoGenerated: true
    }
  ]

  // Ajouter les t√¢ches
  for (const taskData of demoTasks) {
    const task: Task = {
      ...taskData,
      id: crypto.randomUUID(),
      createdAt: new Date(Date.now() - Math.random() * 10 * 24 * 60 * 60 * 1000), // Dans les 10 derniers jours
      updatedAt: new Date()
    }
    await db.tasks.add(task)
  }

  console.log('üìä Donn√©es de d√©monstration ajout√©es avec succ√®s !')
  console.log(`‚úÖ ${addedContacts.length} contacts cr√©√©s`)
  console.log(`‚úÖ ${addedDeals.length} deals cr√©√©s`)
  console.log(`‚úÖ ${demoTasks.length} t√¢ches cr√©√©es`)
}